(define (make-queue)
  (let ((front-ptr '())
	(rear-ptr '()))
    (define (empty?)
      (null? front-ptr))
    (define (front) 
      (error-if-empty "FRONT")
      (car front-ptr))
    (define (insert! item)
      (let ((new-pair (cons item '()))
	    (old-rear-ptr rear-ptr))
	(set! rear-ptr new-pair)
	(if (null? front-ptr)
	    (set! front-ptr new-pair)
	    (set-cdr! old-rear-ptr new-pair))))
    (define (delete!)
      (error-if-empty "DELETE")
      (set! front-ptr (cdr front-ptr)))
    (define (display-queue) (display front-ptr))
    (define (error-if-empty name)
      (if (empty?)
	  (error name " called with an empty queue" )
	  true))    
    (define (dispatch m)
      (cond ((eq? m 'empty) empty?)
	    ((eq? m 'front) front)
	    ((eq? m 'insert) insert!)
	    ((eq? m 'delete) delete!)
	    ((eq? m 'display) display-queue)
	    (else (error "Unknown queue operation " m))))
    dispatch))

(define (empty-queue? queue)
  ((queue 'empty)))

(define (front-queue queue)
  ((queue 'front)))

(define (insert-queue! queue item)
  ((queue 'insert) item)
  queue)

(define (delete-queue! queue)
  ((queue 'delete))
  queue)

(define (display-queue queue)
  ((queue 'display)))
